//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/Services/Input/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Assets.Scripts.Services.Input
{
    public partial class @InputActions: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""GamePlayInput"",
            ""id"": ""2d5b7bac-b212-46eb-818b-27f0fea2bd97"",
            ""actions"": [
                {
                    ""name"": ""HandlePressedMove"",
                    ""type"": ""Value"",
                    ""id"": ""cfe3a5cb-e17e-4858-8137-b870d6713a15"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""HandleMove"",
                    ""type"": ""Value"",
                    ""id"": ""0efc2cc1-0fda-4804-8e05-4d7b5a1e353a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Press"",
                    ""type"": ""Value"",
                    ""id"": ""26dda025-7ded-4eb8-aca0-a6ec59a127ea"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""1385000c-fdf0-4c2a-b836-10a038a95e48"",
                    ""path"": ""OneModifier"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HandlePressedMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""35858049-081c-4aa3-a89e-0ca493c00185"",
                    ""path"": ""<Mouse>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HandlePressedMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Binding"",
                    ""id"": ""ef131cd9-e35f-4ab3-977e-49246ffc4df8"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HandlePressedMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""e82a670c-8f40-44e4-9d15-0db17a3e441f"",
                    ""path"": ""OneModifier"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HandlePressedMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""21ae1be7-df11-4e1b-8bab-16ee7ef6143a"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HandlePressedMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""8eaae3c2-8543-45d3-84d7-4d3afbaed111"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HandlePressedMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0d6095f0-e027-4d78-a37f-7b5d94618342"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HandleMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""36420ed7-40d3-4d6d-95c7-d2530ecb112a"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HandleMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""fb1209cc-f2d5-4330-92e5-456f58c2086f"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Press"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""481b82b5-f2da-40a5-ad48-6a9ee2e8458d"",
                    ""path"": ""<Mouse>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""523c28dc-1d23-49f8-8c95-b0f47c023e73"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""2992c0bf-9e6d-41be-811b-e321590e8f81"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Press"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""06961fbe-9fa0-4e19-bac5-17dea246a034"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""13d45ca8-adf3-49f0-af49-c24f754367f8"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""GameplayWindowsInput"",
            ""id"": ""c2282313-7a69-49a5-b109-b5fe9a4a59c6"",
            ""actions"": [
                {
                    ""name"": ""UndoButtonPressed"",
                    ""type"": ""Button"",
                    ""id"": ""646ec2ec-e25c-4092-b2b3-0c23cb8fccd6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RemoveBuildingButtonPressed"",
                    ""type"": ""Button"",
                    ""id"": ""69b2f8ad-bfb2-42d0-9e47-5cb0c47558c2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ReplaceBuildingButtonPressed"",
                    ""type"": ""Button"",
                    ""id"": ""aec0ae4d-bffd-442f-99b1-adfa7f366123"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ef7a82fa-6d82-4f8c-9339-6993b49f4fac"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UndoButtonPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3d31f951-6701-46c4-b2f4-833b541ec097"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RemoveBuildingButtonPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""26f690c6-de53-4f73-af40-8eacb1880b52"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ReplaceBuildingButtonPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SandboxWindowsInput"",
            ""id"": ""09895669-232b-488c-a572-ca2dda9dbc84"",
            ""actions"": [
                {
                    ""name"": ""ClearTilesButtonPressed"",
                    ""type"": ""Button"",
                    ""id"": ""1007a508-8622-4eec-bca3-f4ab24545795"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BuildingsButtonPressed"",
                    ""type"": ""Button"",
                    ""id"": ""62892cb2-c31f-42a9-a735-fc5d98b6396a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GroundsButtonPressed"",
                    ""type"": ""Button"",
                    ""id"": ""0670fc82-d949-474d-80c3-1d50b2c82436"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1b454731-5509-4b1f-bf21-24ef7a136381"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ClearTilesButtonPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2e27edb5-57ac-4456-9679-c5e9dd81bed5"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BuildingsButtonPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5cb85f8e-d1ef-4d89-b722-472adba47ecf"",
                    ""path"": ""<Keyboard>/6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GroundsButtonPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SandboxInput"",
            ""id"": ""a69ce48c-9319-487a-8377-022a718a8cbb"",
            ""actions"": [
                {
                    ""name"": ""FirstTouch"",
                    ""type"": ""Value"",
                    ""id"": ""e2cf12b3-6323-4f3d-b230-9bd96a71bdb0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SecondTouch"",
                    ""type"": ""Value"",
                    ""id"": ""fb697694-6de3-402e-9f0d-54b275f05d22"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseScroll"",
                    ""type"": ""Value"",
                    ""id"": ""a1d00a99-178c-4adf-8292-773dbb5224b8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RotateWorld"",
                    ""type"": ""Value"",
                    ""id"": ""afb3eafc-c528-4a43-8b1b-6d994ff8e55a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""562cebfa-c4e3-4680-bf4c-188a85f07929"",
                    ""path"": ""<Touchscreen>/touch0/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FirstTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9d68ef98-09f2-4ea4-9340-b44d357e2081"",
                    ""path"": ""<Touchscreen>/touch1/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2edc70b2-8cd3-4adf-902a-d56cfd28426c"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseScroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""4345b63c-e8e4-4e59-8e64-5fcf97e66817"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateWorld"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""2bfdba5a-e59e-4c26-b352-9c0a092b9b56"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateWorld"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""2826f09b-74cc-4305-8cbc-4946f945482f"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateWorld"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""fbcf65ab-1675-42b8-8b1b-2700077a1e41"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateWorld"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""4fc62be0-b317-4717-a737-1ec845994595"",
                    ""path"": ""<Touchscreen>/touch0/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateWorld"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""1b683eb9-4189-4a12-b092-dc4f12e46c39"",
                    ""path"": ""<Touchscreen>/touch1/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateWorld"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // GamePlayInput
            m_GamePlayInput = asset.FindActionMap("GamePlayInput", throwIfNotFound: true);
            m_GamePlayInput_HandlePressedMove = m_GamePlayInput.FindAction("HandlePressedMove", throwIfNotFound: true);
            m_GamePlayInput_HandleMove = m_GamePlayInput.FindAction("HandleMove", throwIfNotFound: true);
            m_GamePlayInput_Press = m_GamePlayInput.FindAction("Press", throwIfNotFound: true);
            // GameplayWindowsInput
            m_GameplayWindowsInput = asset.FindActionMap("GameplayWindowsInput", throwIfNotFound: true);
            m_GameplayWindowsInput_UndoButtonPressed = m_GameplayWindowsInput.FindAction("UndoButtonPressed", throwIfNotFound: true);
            m_GameplayWindowsInput_RemoveBuildingButtonPressed = m_GameplayWindowsInput.FindAction("RemoveBuildingButtonPressed", throwIfNotFound: true);
            m_GameplayWindowsInput_ReplaceBuildingButtonPressed = m_GameplayWindowsInput.FindAction("ReplaceBuildingButtonPressed", throwIfNotFound: true);
            // SandboxWindowsInput
            m_SandboxWindowsInput = asset.FindActionMap("SandboxWindowsInput", throwIfNotFound: true);
            m_SandboxWindowsInput_ClearTilesButtonPressed = m_SandboxWindowsInput.FindAction("ClearTilesButtonPressed", throwIfNotFound: true);
            m_SandboxWindowsInput_BuildingsButtonPressed = m_SandboxWindowsInput.FindAction("BuildingsButtonPressed", throwIfNotFound: true);
            m_SandboxWindowsInput_GroundsButtonPressed = m_SandboxWindowsInput.FindAction("GroundsButtonPressed", throwIfNotFound: true);
            // SandboxInput
            m_SandboxInput = asset.FindActionMap("SandboxInput", throwIfNotFound: true);
            m_SandboxInput_FirstTouch = m_SandboxInput.FindAction("FirstTouch", throwIfNotFound: true);
            m_SandboxInput_SecondTouch = m_SandboxInput.FindAction("SecondTouch", throwIfNotFound: true);
            m_SandboxInput_MouseScroll = m_SandboxInput.FindAction("MouseScroll", throwIfNotFound: true);
            m_SandboxInput_RotateWorld = m_SandboxInput.FindAction("RotateWorld", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // GamePlayInput
        private readonly InputActionMap m_GamePlayInput;
        private List<IGamePlayInputActions> m_GamePlayInputActionsCallbackInterfaces = new List<IGamePlayInputActions>();
        private readonly InputAction m_GamePlayInput_HandlePressedMove;
        private readonly InputAction m_GamePlayInput_HandleMove;
        private readonly InputAction m_GamePlayInput_Press;
        public struct GamePlayInputActions
        {
            private @InputActions m_Wrapper;
            public GamePlayInputActions(@InputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @HandlePressedMove => m_Wrapper.m_GamePlayInput_HandlePressedMove;
            public InputAction @HandleMove => m_Wrapper.m_GamePlayInput_HandleMove;
            public InputAction @Press => m_Wrapper.m_GamePlayInput_Press;
            public InputActionMap Get() { return m_Wrapper.m_GamePlayInput; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GamePlayInputActions set) { return set.Get(); }
            public void AddCallbacks(IGamePlayInputActions instance)
            {
                if (instance == null || m_Wrapper.m_GamePlayInputActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_GamePlayInputActionsCallbackInterfaces.Add(instance);
                @HandlePressedMove.started += instance.OnHandlePressedMove;
                @HandlePressedMove.performed += instance.OnHandlePressedMove;
                @HandlePressedMove.canceled += instance.OnHandlePressedMove;
                @HandleMove.started += instance.OnHandleMove;
                @HandleMove.performed += instance.OnHandleMove;
                @HandleMove.canceled += instance.OnHandleMove;
                @Press.started += instance.OnPress;
                @Press.performed += instance.OnPress;
                @Press.canceled += instance.OnPress;
            }

            private void UnregisterCallbacks(IGamePlayInputActions instance)
            {
                @HandlePressedMove.started -= instance.OnHandlePressedMove;
                @HandlePressedMove.performed -= instance.OnHandlePressedMove;
                @HandlePressedMove.canceled -= instance.OnHandlePressedMove;
                @HandleMove.started -= instance.OnHandleMove;
                @HandleMove.performed -= instance.OnHandleMove;
                @HandleMove.canceled -= instance.OnHandleMove;
                @Press.started -= instance.OnPress;
                @Press.performed -= instance.OnPress;
                @Press.canceled -= instance.OnPress;
            }

            public void RemoveCallbacks(IGamePlayInputActions instance)
            {
                if (m_Wrapper.m_GamePlayInputActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IGamePlayInputActions instance)
            {
                foreach (var item in m_Wrapper.m_GamePlayInputActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_GamePlayInputActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public GamePlayInputActions @GamePlayInput => new GamePlayInputActions(this);

        // GameplayWindowsInput
        private readonly InputActionMap m_GameplayWindowsInput;
        private List<IGameplayWindowsInputActions> m_GameplayWindowsInputActionsCallbackInterfaces = new List<IGameplayWindowsInputActions>();
        private readonly InputAction m_GameplayWindowsInput_UndoButtonPressed;
        private readonly InputAction m_GameplayWindowsInput_RemoveBuildingButtonPressed;
        private readonly InputAction m_GameplayWindowsInput_ReplaceBuildingButtonPressed;
        public struct GameplayWindowsInputActions
        {
            private @InputActions m_Wrapper;
            public GameplayWindowsInputActions(@InputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @UndoButtonPressed => m_Wrapper.m_GameplayWindowsInput_UndoButtonPressed;
            public InputAction @RemoveBuildingButtonPressed => m_Wrapper.m_GameplayWindowsInput_RemoveBuildingButtonPressed;
            public InputAction @ReplaceBuildingButtonPressed => m_Wrapper.m_GameplayWindowsInput_ReplaceBuildingButtonPressed;
            public InputActionMap Get() { return m_Wrapper.m_GameplayWindowsInput; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GameplayWindowsInputActions set) { return set.Get(); }
            public void AddCallbacks(IGameplayWindowsInputActions instance)
            {
                if (instance == null || m_Wrapper.m_GameplayWindowsInputActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_GameplayWindowsInputActionsCallbackInterfaces.Add(instance);
                @UndoButtonPressed.started += instance.OnUndoButtonPressed;
                @UndoButtonPressed.performed += instance.OnUndoButtonPressed;
                @UndoButtonPressed.canceled += instance.OnUndoButtonPressed;
                @RemoveBuildingButtonPressed.started += instance.OnRemoveBuildingButtonPressed;
                @RemoveBuildingButtonPressed.performed += instance.OnRemoveBuildingButtonPressed;
                @RemoveBuildingButtonPressed.canceled += instance.OnRemoveBuildingButtonPressed;
                @ReplaceBuildingButtonPressed.started += instance.OnReplaceBuildingButtonPressed;
                @ReplaceBuildingButtonPressed.performed += instance.OnReplaceBuildingButtonPressed;
                @ReplaceBuildingButtonPressed.canceled += instance.OnReplaceBuildingButtonPressed;
            }

            private void UnregisterCallbacks(IGameplayWindowsInputActions instance)
            {
                @UndoButtonPressed.started -= instance.OnUndoButtonPressed;
                @UndoButtonPressed.performed -= instance.OnUndoButtonPressed;
                @UndoButtonPressed.canceled -= instance.OnUndoButtonPressed;
                @RemoveBuildingButtonPressed.started -= instance.OnRemoveBuildingButtonPressed;
                @RemoveBuildingButtonPressed.performed -= instance.OnRemoveBuildingButtonPressed;
                @RemoveBuildingButtonPressed.canceled -= instance.OnRemoveBuildingButtonPressed;
                @ReplaceBuildingButtonPressed.started -= instance.OnReplaceBuildingButtonPressed;
                @ReplaceBuildingButtonPressed.performed -= instance.OnReplaceBuildingButtonPressed;
                @ReplaceBuildingButtonPressed.canceled -= instance.OnReplaceBuildingButtonPressed;
            }

            public void RemoveCallbacks(IGameplayWindowsInputActions instance)
            {
                if (m_Wrapper.m_GameplayWindowsInputActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IGameplayWindowsInputActions instance)
            {
                foreach (var item in m_Wrapper.m_GameplayWindowsInputActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_GameplayWindowsInputActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public GameplayWindowsInputActions @GameplayWindowsInput => new GameplayWindowsInputActions(this);

        // SandboxWindowsInput
        private readonly InputActionMap m_SandboxWindowsInput;
        private List<ISandboxWindowsInputActions> m_SandboxWindowsInputActionsCallbackInterfaces = new List<ISandboxWindowsInputActions>();
        private readonly InputAction m_SandboxWindowsInput_ClearTilesButtonPressed;
        private readonly InputAction m_SandboxWindowsInput_BuildingsButtonPressed;
        private readonly InputAction m_SandboxWindowsInput_GroundsButtonPressed;
        public struct SandboxWindowsInputActions
        {
            private @InputActions m_Wrapper;
            public SandboxWindowsInputActions(@InputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @ClearTilesButtonPressed => m_Wrapper.m_SandboxWindowsInput_ClearTilesButtonPressed;
            public InputAction @BuildingsButtonPressed => m_Wrapper.m_SandboxWindowsInput_BuildingsButtonPressed;
            public InputAction @GroundsButtonPressed => m_Wrapper.m_SandboxWindowsInput_GroundsButtonPressed;
            public InputActionMap Get() { return m_Wrapper.m_SandboxWindowsInput; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(SandboxWindowsInputActions set) { return set.Get(); }
            public void AddCallbacks(ISandboxWindowsInputActions instance)
            {
                if (instance == null || m_Wrapper.m_SandboxWindowsInputActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_SandboxWindowsInputActionsCallbackInterfaces.Add(instance);
                @ClearTilesButtonPressed.started += instance.OnClearTilesButtonPressed;
                @ClearTilesButtonPressed.performed += instance.OnClearTilesButtonPressed;
                @ClearTilesButtonPressed.canceled += instance.OnClearTilesButtonPressed;
                @BuildingsButtonPressed.started += instance.OnBuildingsButtonPressed;
                @BuildingsButtonPressed.performed += instance.OnBuildingsButtonPressed;
                @BuildingsButtonPressed.canceled += instance.OnBuildingsButtonPressed;
                @GroundsButtonPressed.started += instance.OnGroundsButtonPressed;
                @GroundsButtonPressed.performed += instance.OnGroundsButtonPressed;
                @GroundsButtonPressed.canceled += instance.OnGroundsButtonPressed;
            }

            private void UnregisterCallbacks(ISandboxWindowsInputActions instance)
            {
                @ClearTilesButtonPressed.started -= instance.OnClearTilesButtonPressed;
                @ClearTilesButtonPressed.performed -= instance.OnClearTilesButtonPressed;
                @ClearTilesButtonPressed.canceled -= instance.OnClearTilesButtonPressed;
                @BuildingsButtonPressed.started -= instance.OnBuildingsButtonPressed;
                @BuildingsButtonPressed.performed -= instance.OnBuildingsButtonPressed;
                @BuildingsButtonPressed.canceled -= instance.OnBuildingsButtonPressed;
                @GroundsButtonPressed.started -= instance.OnGroundsButtonPressed;
                @GroundsButtonPressed.performed -= instance.OnGroundsButtonPressed;
                @GroundsButtonPressed.canceled -= instance.OnGroundsButtonPressed;
            }

            public void RemoveCallbacks(ISandboxWindowsInputActions instance)
            {
                if (m_Wrapper.m_SandboxWindowsInputActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ISandboxWindowsInputActions instance)
            {
                foreach (var item in m_Wrapper.m_SandboxWindowsInputActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_SandboxWindowsInputActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public SandboxWindowsInputActions @SandboxWindowsInput => new SandboxWindowsInputActions(this);

        // SandboxInput
        private readonly InputActionMap m_SandboxInput;
        private List<ISandboxInputActions> m_SandboxInputActionsCallbackInterfaces = new List<ISandboxInputActions>();
        private readonly InputAction m_SandboxInput_FirstTouch;
        private readonly InputAction m_SandboxInput_SecondTouch;
        private readonly InputAction m_SandboxInput_MouseScroll;
        private readonly InputAction m_SandboxInput_RotateWorld;
        public struct SandboxInputActions
        {
            private @InputActions m_Wrapper;
            public SandboxInputActions(@InputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @FirstTouch => m_Wrapper.m_SandboxInput_FirstTouch;
            public InputAction @SecondTouch => m_Wrapper.m_SandboxInput_SecondTouch;
            public InputAction @MouseScroll => m_Wrapper.m_SandboxInput_MouseScroll;
            public InputAction @RotateWorld => m_Wrapper.m_SandboxInput_RotateWorld;
            public InputActionMap Get() { return m_Wrapper.m_SandboxInput; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(SandboxInputActions set) { return set.Get(); }
            public void AddCallbacks(ISandboxInputActions instance)
            {
                if (instance == null || m_Wrapper.m_SandboxInputActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_SandboxInputActionsCallbackInterfaces.Add(instance);
                @FirstTouch.started += instance.OnFirstTouch;
                @FirstTouch.performed += instance.OnFirstTouch;
                @FirstTouch.canceled += instance.OnFirstTouch;
                @SecondTouch.started += instance.OnSecondTouch;
                @SecondTouch.performed += instance.OnSecondTouch;
                @SecondTouch.canceled += instance.OnSecondTouch;
                @MouseScroll.started += instance.OnMouseScroll;
                @MouseScroll.performed += instance.OnMouseScroll;
                @MouseScroll.canceled += instance.OnMouseScroll;
                @RotateWorld.started += instance.OnRotateWorld;
                @RotateWorld.performed += instance.OnRotateWorld;
                @RotateWorld.canceled += instance.OnRotateWorld;
            }

            private void UnregisterCallbacks(ISandboxInputActions instance)
            {
                @FirstTouch.started -= instance.OnFirstTouch;
                @FirstTouch.performed -= instance.OnFirstTouch;
                @FirstTouch.canceled -= instance.OnFirstTouch;
                @SecondTouch.started -= instance.OnSecondTouch;
                @SecondTouch.performed -= instance.OnSecondTouch;
                @SecondTouch.canceled -= instance.OnSecondTouch;
                @MouseScroll.started -= instance.OnMouseScroll;
                @MouseScroll.performed -= instance.OnMouseScroll;
                @MouseScroll.canceled -= instance.OnMouseScroll;
                @RotateWorld.started -= instance.OnRotateWorld;
                @RotateWorld.performed -= instance.OnRotateWorld;
                @RotateWorld.canceled -= instance.OnRotateWorld;
            }

            public void RemoveCallbacks(ISandboxInputActions instance)
            {
                if (m_Wrapper.m_SandboxInputActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ISandboxInputActions instance)
            {
                foreach (var item in m_Wrapper.m_SandboxInputActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_SandboxInputActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public SandboxInputActions @SandboxInput => new SandboxInputActions(this);
        public interface IGamePlayInputActions
        {
            void OnHandlePressedMove(InputAction.CallbackContext context);
            void OnHandleMove(InputAction.CallbackContext context);
            void OnPress(InputAction.CallbackContext context);
        }
        public interface IGameplayWindowsInputActions
        {
            void OnUndoButtonPressed(InputAction.CallbackContext context);
            void OnRemoveBuildingButtonPressed(InputAction.CallbackContext context);
            void OnReplaceBuildingButtonPressed(InputAction.CallbackContext context);
        }
        public interface ISandboxWindowsInputActions
        {
            void OnClearTilesButtonPressed(InputAction.CallbackContext context);
            void OnBuildingsButtonPressed(InputAction.CallbackContext context);
            void OnGroundsButtonPressed(InputAction.CallbackContext context);
        }
        public interface ISandboxInputActions
        {
            void OnFirstTouch(InputAction.CallbackContext context);
            void OnSecondTouch(InputAction.CallbackContext context);
            void OnMouseScroll(InputAction.CallbackContext context);
            void OnRotateWorld(InputAction.CallbackContext context);
        }
    }
}
